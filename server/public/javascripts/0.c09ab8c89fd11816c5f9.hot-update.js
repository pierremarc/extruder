webpackHotUpdate(0,{

/***/ "./extrude.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_point__ = __webpack_require__(\"../lib/point.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_state__ = __webpack_require__(\"../lib/state.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lib_ctx_paper__ = __webpack_require__(\"../lib/ctx-paper.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lib_operation__ = __webpack_require__(\"../lib/operation.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__draw__ = __webpack_require__(\"./draw.js\");\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = extrude;\n\n\n\n\n\n\n\nfunction extrudeLine(ctx, rect, x, y, text, font, fontSize) {\n    var anchor = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lib_point__[\"a\" /* default */])(rect.minx, rect.miny);\n    var knockout = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__lib_state__[\"c\" /* getState */])('knockout', false);\n\n    var _draw = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__draw__[\"a\" /* default */])(text, font, fontSize, x, y, anchor),\n        extrusion = _draw.extrusion,\n        mask = _draw.mask;\n\n    if (knockout) {\n        (function () {\n            var paperEx = new __WEBPACK_IMPORTED_MODULE_2__lib_ctx_paper__[\"a\" /* default */]();\n            var maskOps = [];\n            mask.forEach(function (operation) {\n                var opCode = operation[0];\n                if (opCode === __WEBPACK_IMPORTED_MODULE_3__lib_operation__[\"a\" /* OP_BEGIN */]) {\n                    maskOps.push([]);\n                }\n                if (maskOps.length > 0) {\n                    maskOps[maskOps.length - 1].push(operation);\n                }\n            });\n            var masks = [];\n            maskOps.forEach(function (maskOp) {\n                var m = new __WEBPACK_IMPORTED_MODULE_2__lib_ctx_paper__[\"a\" /* default */](true);\n                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_operation__[\"b\" /* render */])(m, maskOp);\n                masks.push(m);\n            });\n\n            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_operation__[\"b\" /* render */])(paperEx, extrusion);\n            masks.forEach(function (m) {\n                paperEx.substract(m);\n            });\n            var knockoutOps = paperEx.exportOperations();\n            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_operation__[\"b\" /* render */])(ctx, knockoutOps);\n        })();\n    } else {\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_operation__[\"b\" /* render */])(ctx, extrusion.concat(mask));\n    }\n}\n\nfunction extrude(ctx, state) {\n    var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var x = state.x,\n        y = state.y,\n        text = state.text,\n        font = state.font,\n        margin = state.margin,\n        width = state.width,\n        height = state.height,\n        offset = state.offset;\n\n    var lines = text.split('\\n');\n\n    if (!font) {\n        return false;\n    }\n\n    if (lines.length > 0) {\n        (function () {\n            var scaledMargin = Math.max(margin * ctx.width, margin * ctx.height);\n            var innerWidth = ctx.width - scaledMargin * 2;\n            var innerHeight = ctx.height - scaledMargin * 2;\n            var lineHeight = innerHeight / lines.length;\n            var baseFactor = 0.8;\n            var fontSize = lineHeight;\n            var left = offset.x + scaledMargin;\n            var top = offset.y + scaledMargin;\n\n            var processLine = function processLine(line, idx) {\n                if (line.length > 0) {\n                    var rect = {\n                        minx: left,\n                        miny: top + idx * lineHeight + baseFactor * lineHeight,\n                        maxx: left + innerWidth,\n                        maxy: top + idx * lineHeight,\n                        width: innerWidth,\n                        height: lineHeight\n                    };\n                    // debug('line-rect', rect);\n                    extrudeLine(ctx, rect, x * scale, y * scale, line, font, fontSize);\n                }\n            };\n            if (y < 0) {\n                for (var idx = lines.length - 1; idx >= 0; idx -= 1) {\n                    processLine(lines[idx], idx);\n                }\n            } else {\n                lines.forEach(processLine);\n            }\n        })();\n    }\n\n    return true;\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./extrude.js\n// module id = ./extrude.js\n// module chunks = 0\n\n//# sourceURL=webpack:///./extrude.js?");

/***/ })

})